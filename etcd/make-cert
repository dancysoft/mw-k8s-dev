#!/bin/bash

set -e

# Delete any existing CSR
kubectl delete csr etcd.wmf || true

# This generates server-key.pem and server.csr
cat <<EOF | cfssl genkey - | cfssljson -bare server
{
  "hosts": [
      "etcd.wmf.svc.cluster.local",
      "etcd"
  ],
  "CN": "system:node:etcd.wmf.svc.cluster.local",
  "key": {
    "algo": "ecdsa",
    "size": 256
  },
  "names": [
    {
      "O": "system:nodes"
    }
  ]
}
EOF

cat <<EOF | kubectl apply -f -
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: etcd.wmf
spec:
  request: $(cat server.csr | base64 | tr -d '\n')
  signerName: kubernetes.io/kubelet-serving
  usages:
  - digital signature
  - key encipherment
  - server auth
EOF

# Give it time to show up
sleep 1

# approve it
kubectl certificate approve etcd.wmf

# And extract the certificate
kubectl get csr/etcd.wmf -o jsonpath='{.status.certificate}' | base64 --decode > server.crt

kubectl delete secret etcd-tls || true
kubectl create secret tls etcd-tls --key=server-key.pem --cert=server.crt

echo etcd-tls secret has been created
