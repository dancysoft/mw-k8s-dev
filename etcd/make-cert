#!/bin/bash

# This script generates:
#
# Files:
# * ssl/key.pem
# * ssl/server.crt
#
# Kubernetes secrets:
# * etcd-tls
#

set -eu -o pipefail

mkdir -p ssl
cd ssl

# Delete any existing CSR
kubectl delete csr etcd.wmf 2>/dev/null || true

# --addext requires openssl 1.1.1
openssl req -new \
        -subj /CN=system:node:etcd.wmf.svc.cluster.local/O=system:nodes \
        -addext "subjectAltName=DNS:mw-etcd, DNS:etcd" \
        -newkey rsa:4096 \
        -nodes \
        -keyout key.pem \
        -out csr.pem

cat <<EOF | kubectl apply -f -
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: etcd.wmf
spec:
  request: $(cat csr.pem | base64 -w0)
  signerName: kubernetes.io/kubelet-serving
  usages:
  - digital signature
  - key encipherment
  - server auth
EOF

rm csr.pem

# Give it time to show up
sleep 3

# Approve the CSR
kubectl certificate approve etcd.wmf
# Allow some time for the certificate to show up
sleep 3

# And extract the certificate
kubectl get csr/etcd.wmf -o jsonpath='{.status.certificate}' | base64 --decode > server.crt

kubectl delete secret etcd-tls || true
kubectl create secret tls etcd-tls --key=key.pem --cert=server.crt

echo etcd-tls secret has been created
